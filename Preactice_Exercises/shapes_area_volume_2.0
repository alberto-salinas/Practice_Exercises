from prettytable import PrettyTable

# TODO: Design a few classes that represent the following geometric figures (circle, square).
#  They should do the following member functions --> get_area and get_volume.
#  Each class should have constructor (eg __init__) method that instantiate data the class should keep track of.

# circle area = πr^2
# circle volume (cylinder) = πr2h
# square area = side^2
# square volume = side^3


########### Alternatives Solution: Jose ###########

# Adding these constants to add color to print statements
HEADER = "\033[95m"
OKBLUE = "\033[94m"
OKCYAN = "\033[96m"
OKGREEN = "\033[92m"
WARNING = "\033[93m"
FAIL = "\033[91m"
ENDC = "\033[0m"
BOLD = "\033[1m"
UNDERLINE = "\033[4m"


def printC(text, color=OKBLUE):
    """ Create a simple print function that adds color to text
    """
    print(color + text + ENDC)


pi = 3.14


class CircleJose:
    def __init__(self, radius, height):
        # Information/state your class is managing
        self.radius = radius
        self.height = height

    # define member functions, these functions specific to circle
    def get_area(self):
        return pi * self.radius**2

    def get_volume(self):
        return pi * self.radius * 2 * self.height


class SquareJose:
    def __init__(self, side):
        # Information/state your class is managing
        self.side = side

    # define member functions, these functions specific to square
    def get_area(self):
        return self.side**2

    def get_volume(self):
        return self.side**3


printC("Starting Jose's solution")
radius = float(input("What is the radius of circle: "))
height = float(input("What is the height of your circle: "))

circleInstance = CircleJose(radius, height)

side = int(input("How many sides does your square have?: "))
squareInstance = SquareJose(side)

table = PrettyTable()
table.align = "l"
table.add_column(
    "Circle Area & Volume",
    [
        f"Your circle area is {circleInstance.get_area()}",
        f"Your circle volume is {circleInstance.get_volume()}",
    ],
)
table.add_column(
    "Square Area & Volume",
    [
        f"Your square area is {squareInstance.get_area()}",
        f"Your square volume is {squareInstance.get_volume()}",                
    ],
)
print(table)


########### End of Solution ###########
class Circle:  # (jose): you declare class but do not use class at all
    def __init__(self):
        self.area = circle_get_area  # (jose): if you call your class, this line will cause it to crash if circle_get_area has not been declared
        self.volume = circle_get_volume  # (jose): if you call your class, this line will cause it to crash if circle_get_volume has not been declared


class Square:  # (jose): you declare class but do not use class at all
    def __init__(self):
        self.area = square_get_area  # (jose): if you call your class, this line will cause it to crash if square_get_area has not been declared
        self.volume = square_get_volume  # (jose): if you call your class, this line will cause it to crash if square_get_volume has not been declared


printC("Starting Vicente's solution", WARNING)
pi = 3.14
radius = float(input("What is the radius of circle: "))
height = float(input("What is the height of your circle: "))
circle_get_area = pi * radius**2
circle_get_volume = pi * radius * 2 * height

side = int(
    input("How many sides does your square have?: ")
)  # (jose): I would rephrase as "What is the length of your square's sides?"
square_get_area = side**2
square_get_volume = side**3

table = PrettyTable()
table.align = "l"
table.add_column(
    "Circle Area & Volume",
    [
        f"Your circle area is {circle_get_area}",
        f"Your circle volume is {circle_get_volume}",
    ],
)
table.add_column(
    "Square Area & Volume",
    [
        f"Your square area is {square_get_area}",
        f"Your square volume is {square_get_volume}",
    ],
)
print(table)
